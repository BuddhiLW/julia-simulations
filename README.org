#+title: Notes

#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src

* Kelly Criterion
** Bias coin-toss
Let $X_i$ be the bankroll, in the moment of the =i-th= coin-toss.

\begin{equation}
\begin{aligned}
X_{n}&=X_{n-1}+\,T_{k}\,B_{k} \\
\Leftrightarrow X_{n}&=X_{0}+\sum_{k=1}^{n}\,T_{k}\,B_{k}
\end{aligned}
\end{equation}

The expectation is:
$E(X_{n})=X_{0}+\sum_{k=1}^{n}E(B_{k}T_{k})=X_{0}+\sum_{k=1}^{n}(p-q)E(B_{k})$

Following this formula, we can simulate these =Random Walks= and even measure, through Monte Carlo Method, the =Probability of Ruin=, given $(p,B_k)$, in which =T= is the outcome - either 1 or -1 (win or lose).

** Using Julia to Simulate the =Random Walk=
#+begin_src julia
using Random, Distributions, Plots

moeda_viciada = Binomial(1, 6/10)
p = plot()
for m=1:10
    v0=400
    n=1000
    jogadas = rand(moeda_viciada, n)
    v=zeros(n)
    v[1]=v0
    for i=1:n-1
        if jogadas[i] == 1
            v[i+1] = v[i] + 1*(0.1*v[i])
        else
            v[i+1] = v[i] - 1*(0.1*v[i])
        end
    end
    plot!(v[1:n], yaxis=:log)
end

for m=1:10
    v0=400
    n=1000
    jogadas = rand(moeda_viciada, n)
    v=zeros(n)
    v[1]=v0
    for i=1:n-1
        if jogadas[i] == 1
            v[i+1] = v[i] + 1*(0.2*v[i])
        else
            v[i+1] = v[i] - 1*(0.2*v[i])
        end
    end
    plot!(v[1:n], yaxis=:log)
end

plot(p, title="VÃ¡rios jogos de 1000 coin-flips", xlabel="EstratÃ©gia, aposta 10% vs 20% (moeda 60% viciada)", ylabel="Valor da banca (escala log)", legend=false)

savefig("estrategia-moeda-viciada.png")
#+end_src

#+ATTR_HTML: :width 1000px
[[file:outputs/estrategia-moeda-viciada.png::‰PNG]]

** Using Julia to Simulate the /expected-value of the growth rate coefficient/

#+begin_src julia
function g(p,q,f)
    return p*log(1+f) + q*log(1-f)
end

fs = range(0,0.5, 100)

function gl(p, q, f)
    return (p-q-f)/((1-f)*(1+f))
end


function gll(p,q,f)
    return (-p/(1+f)^2) + (-q/(1-f)^2)
end

p1=plot(fs,g.(0.6, 0.4,fs), title="Expectativa(aposta)", xlabel="f: aposta", ylabel="g(f): expectativa")
scatter!([0.2],[g(0.6,0.4,0.2)], mc=:red)
annotate!(0.2, 0.021, text("Max", :bottom, 8))
annotate!(0.2, 0.018, text("(x,y) = (0.2, 0.0201)", :top, 8))
p2=plot(fs, gl.(0.6,0.4,fs), title="Derivada primeira")
scatter!([0.2], [0], mc=:red)
annotate!(0.2, 0.02, text("deriv=0", :bottom, 8))
annotate!(0.2, -0.02, text("(x,y) = (0.2, 0.0)", :top, 8))
p3=plot(fs, gll.(0.6,0.4,fs), title="Derivada segunda")
plot(p1,p2,p3)
savefig("expectativa.png")
plot(p2)
#+end_src

#+ATTR_HTML: :width 1000px
[[file:outputs/expectativa.png::‰PNG]]

** Using Julia to Simulate Probability of Ruin
* TODO Monte Carlo
TODO: Comments about integrals with Monte Carlo and the method itself.

#+ATTR_HTML: :width 1000px
[[file:outputs/montecarlo.png::‰PNG]]
